Command Reference
################

# Install celery
    pip install celery

#Install RabbitMQ (Ubuntu Linux 20.04LTS)
    sudo apt-get install rabbitmq-server

# Run Celery
    celery -A NAMEOFINSTANCE worker --loglevel=info

    celery -A core worker --loglevel=info

    [Windows OS]
    celery -A core worker -l info --pool=solo

# Run RabbitMQ (On Windows)

Run:
C:\Program Files\RabbitMQ Server\rabbitmq_server-3.13.0\sbin\rabbitmq-server.bat

#Run First Task
    py manage.py shell
    from task1.tasks import add
    add.delay(2, 2)

    or

    add.apply_async((2, 2), countdown=5)

#Useful commands
    #Show message on completion of task
        logger.info("Sent review email")



###############################
Working with Flower
===============================

Windows Work Around
#####
D:\Django\celery_sendemail\env\lib\site-packages\tornado\platform\asyncio.py

import sys

if sys.platform == 'win32':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

Start Flower
#####
flower -A core --port=5555


###############################
django-celery-beat
===============================

celery -A core beat -l INFO  # For deeper logs use DEBUG
celery -A core worker -B -l INFO

You can also embed beat inside the worker by enabling the workers -B option


Database scheduler
celery -A core beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
###############################

###############################
django-celery-results
===============================
pip install django-celery-results

#settings.py
INSTALLED_APPS = [
    'django_celery_results',
]

CELERY_RESULT_BACKEND = 'django-db'

###########################################
Django Cache
python manage.py createcachetable --dry-run

#settings.py
CELERY_CACHE_BACKEND = 'default'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'cachedb',
    }
}